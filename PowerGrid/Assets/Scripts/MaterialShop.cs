// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using UnityEngine;
using System.Collections;
public class MaterialShop : MonoBehaviour {
	public enum MaterialType {
		Coal,
		Oil,
		Garbage,
		Uranium,
	};
			              
	private int[,] costTable;
	private int[,,] materialRefillTable;
	private int[] inventory = new int[4];
	private int[] inventoryMaximums = new int[4];

	public void Start() {

		inventory [0] = 0;
		inventory [1] = 0;
		inventory [2] = 0;
		inventory [3] = 0;
		
		inventoryMaximums [(int)MaterialType.Coal] = 24;
		inventoryMaximums [(int)MaterialType.Oil] = 24;
		inventoryMaximums [(int)MaterialType.Garbage] = 24;
		inventoryMaximums [(int)MaterialType.Uranium] = 12;
		InitializeCostTables ();
		InitializeMaterialRefillTable ();
		SetInitialStock ();
	}

	public void InitializeMaterialRefillTable() {
		materialRefillTable = new int[7, 4, 4];
		//2 players
		materialRefillTable [2, 1, (int)MaterialType.Coal] 		= 3;
		materialRefillTable [2, 1, (int)MaterialType.Oil] 		= 2;
		materialRefillTable [2, 1, (int)MaterialType.Garbage] 	= 1;
		materialRefillTable [2, 1, (int)MaterialType.Uranium] 	= 1;

		materialRefillTable [2, 2, (int)MaterialType.Coal] 		= 4;
		materialRefillTable [2, 2, (int)MaterialType.Oil] 		= 2;
		materialRefillTable [2, 2, (int)MaterialType.Garbage] 	= 2;
		materialRefillTable [2, 2, (int)MaterialType.Uranium] 	= 1;

		materialRefillTable [2, 3, (int)MaterialType.Coal] 		= 3;
		materialRefillTable [2, 3, (int)MaterialType.Oil] 		= 4;
		materialRefillTable [2, 3, (int)MaterialType.Garbage] 	= 3;
		materialRefillTable [2, 3, (int)MaterialType.Uranium] 	= 1;

		//3 players
		materialRefillTable [3, 1, (int)MaterialType.Coal] 		= 4;
		materialRefillTable [3, 1, (int)MaterialType.Oil] 		= 2;
		materialRefillTable [3, 1, (int)MaterialType.Garbage] 	= 1;
		materialRefillTable [3, 1, (int)MaterialType.Uranium] 	= 1;
							 
		materialRefillTable [3, 2, (int)MaterialType.Coal] 		= 5;
		materialRefillTable [3, 2, (int)MaterialType.Oil] 		= 3;
		materialRefillTable [3, 2, (int)MaterialType.Garbage] 	= 2;
		materialRefillTable [3, 2, (int)MaterialType.Uranium] 	= 1;
							 
		materialRefillTable [3, 3, (int)MaterialType.Coal] 		= 3;
		materialRefillTable [3, 3, (int)MaterialType.Oil] 		= 4;
		materialRefillTable [3, 3, (int)MaterialType.Garbage] 	= 3;
		materialRefillTable [3, 3, (int)MaterialType.Uranium] 	= 1;

		//4 players
		materialRefillTable [4, 1, (int)MaterialType.Coal] 		= 5;
		materialRefillTable [4, 1, (int)MaterialType.Oil] 		= 3;
		materialRefillTable [4, 1, (int)MaterialType.Garbage] 	= 2;
		materialRefillTable [4, 1, (int)MaterialType.Uranium] 	= 1;
							 
		materialRefillTable [4, 2, (int)MaterialType.Coal] 		= 6;
		materialRefillTable [4, 2, (int)MaterialType.Oil] 		= 4;
		materialRefillTable [4, 2, (int)MaterialType.Garbage] 	= 3;
		materialRefillTable [4, 2, (int)MaterialType.Uranium] 	= 2;
							 
		materialRefillTable [4, 3, (int)MaterialType.Coal] 		= 4;
		materialRefillTable [4, 3, (int)MaterialType.Oil] 		= 5;
		materialRefillTable [4, 3, (int)MaterialType.Garbage] 	= 4;
		materialRefillTable [4, 3, (int)MaterialType.Uranium] 	= 2;


		//5 players
		materialRefillTable [5, 1, (int)MaterialType.Coal] 		= 5;
		materialRefillTable [5, 1, (int)MaterialType.Oil] 		= 4;
		materialRefillTable [5, 1, (int)MaterialType.Garbage] 	= 3;
		materialRefillTable [5, 1, (int)MaterialType.Uranium] 	= 2;
							 
		materialRefillTable [5, 2, (int)MaterialType.Coal] 		= 7;
		materialRefillTable [5, 2, (int)MaterialType.Oil] 		= 5;
		materialRefillTable [5, 2, (int)MaterialType.Garbage] 	= 3;
		materialRefillTable [5, 2, (int)MaterialType.Uranium] 	= 3;
							 
		materialRefillTable [5, 3, (int)MaterialType.Coal] 		= 5;
		materialRefillTable [5, 3, (int)MaterialType.Oil] 		= 6;
		materialRefillTable [5, 3, (int)MaterialType.Garbage] 	= 5;
		materialRefillTable [5, 3, (int)MaterialType.Uranium] 	= 2;


		//6 players
		materialRefillTable [6, 1, (int)MaterialType.Coal] 		= 7;
		materialRefillTable [6, 1, (int)MaterialType.Oil] 		= 5;
		materialRefillTable [6, 1, (int)MaterialType.Garbage] 	= 3;
		materialRefillTable [6, 1, (int)MaterialType.Uranium] 	= 2;
							 
		materialRefillTable [6, 2, (int)MaterialType.Coal] 		= 9;
		materialRefillTable [6, 2, (int)MaterialType.Oil] 		= 6;
		materialRefillTable [6, 2, (int)MaterialType.Garbage] 	= 5;
		materialRefillTable [6, 2, (int)MaterialType.Uranium] 	= 3;
							 
		materialRefillTable [6, 3, (int)MaterialType.Coal] 		= 6;
		materialRefillTable [6, 3, (int)MaterialType.Oil] 		= 7;
		materialRefillTable [6, 3, (int)MaterialType.Garbage] 	= 6;
		materialRefillTable [6, 3, (int)MaterialType.Uranium] 	= 3;

	}

	public void InitializeCostTables() {
		costTable = new int[4,25];
		//coal, oil, garbage

		costTable [(int)MaterialType.Coal, 0] = 8;
		costTable [(int)MaterialType.Coal, 1] = 8;
		costTable [(int)MaterialType.Coal, 2] = 8;
		costTable [(int)MaterialType.Coal, 3] = 8;
		costTable [(int)MaterialType.Coal, 4] = 7;
		costTable [(int)MaterialType.Coal, 5] = 7;
		costTable [(int)MaterialType.Coal, 6] = 7;
		costTable [(int)MaterialType.Coal, 7] = 6;
		costTable [(int)MaterialType.Coal, 8] = 6;
		costTable [(int)MaterialType.Coal, 9] = 6;
		costTable [(int)MaterialType.Coal, 10] = 5;
		costTable [(int)MaterialType.Coal, 11] = 5;
		costTable [(int)MaterialType.Coal, 12] = 5;
		costTable [(int)MaterialType.Coal, 13] = 4;
		costTable [(int)MaterialType.Coal, 14] = 4;
		costTable [(int)MaterialType.Coal, 15] = 4;
		costTable [(int)MaterialType.Coal, 16] = 3;
		costTable [(int)MaterialType.Coal, 17] = 3;
		costTable [(int)MaterialType.Coal, 18] = 3;
		costTable [(int)MaterialType.Coal, 19] = 2;
		costTable [(int)MaterialType.Coal, 20] = 2;
		costTable [(int)MaterialType.Coal, 21] = 2;
		costTable [(int)MaterialType.Coal, 22] = 1;
		costTable [(int)MaterialType.Coal, 23] = 1;
		costTable [(int)MaterialType.Coal, 24] = 1;

		costTable [(int)MaterialType.Oil, 0] = 8;
		costTable [(int)MaterialType.Oil, 1] = 8;
		costTable [(int)MaterialType.Oil, 2] = 8;
		costTable [(int)MaterialType.Oil, 3] = 8;
		costTable [(int)MaterialType.Oil, 4] = 7;
		costTable [(int)MaterialType.Oil, 5] = 7;
		costTable [(int)MaterialType.Oil, 6] = 7;
		costTable [(int)MaterialType.Oil, 7] = 6;
		costTable [(int)MaterialType.Oil, 8] = 6;
		costTable [(int)MaterialType.Oil, 9] = 6;
		costTable [(int)MaterialType.Oil, 10] = 5;
		costTable [(int)MaterialType.Oil, 11] = 5;
		costTable [(int)MaterialType.Oil, 12] = 5;
		costTable [(int)MaterialType.Oil, 13] = 4;
		costTable [(int)MaterialType.Oil, 14] = 4;
		costTable [(int)MaterialType.Oil, 15] = 4;
		costTable [(int)MaterialType.Oil, 16] = 3;
		costTable [(int)MaterialType.Oil, 17] = 3;
		costTable [(int)MaterialType.Oil, 18] = 3;
		costTable [(int)MaterialType.Oil, 19] = 2;
		costTable [(int)MaterialType.Oil, 20] = 2;
		costTable [(int)MaterialType.Oil, 21] = 2;
		costTable [(int)MaterialType.Oil, 22] = 1;
		costTable [(int)MaterialType.Oil, 23] = 1;
		costTable [(int)MaterialType.Oil, 24] = 1;

		costTable [(int)MaterialType.Garbage, 0] = 8;
		costTable [(int)MaterialType.Garbage, 1] = 8;
		costTable [(int)MaterialType.Garbage, 2] = 8;
		costTable [(int)MaterialType.Garbage, 3] = 8;
		costTable [(int)MaterialType.Garbage, 4] = 7;
		costTable [(int)MaterialType.Garbage, 5] = 7;
		costTable [(int)MaterialType.Garbage, 6] = 7;
		costTable [(int)MaterialType.Garbage, 7] = 6;
		costTable [(int)MaterialType.Garbage, 8] = 6;
		costTable [(int)MaterialType.Garbage, 9] = 6;
		costTable [(int)MaterialType.Garbage, 10] = 5;
		costTable [(int)MaterialType.Garbage, 11] = 5;
		costTable [(int)MaterialType.Garbage, 12] = 5;
		costTable [(int)MaterialType.Garbage, 13] = 4;
		costTable [(int)MaterialType.Garbage, 14] = 4;
		costTable [(int)MaterialType.Garbage, 15] = 4;
		costTable [(int)MaterialType.Garbage, 16] = 3;
		costTable [(int)MaterialType.Garbage, 17] = 3;
		costTable [(int)MaterialType.Garbage, 18] = 3;
		costTable [(int)MaterialType.Garbage, 19] = 2;
		costTable [(int)MaterialType.Garbage, 20] = 2;
		costTable [(int)MaterialType.Garbage, 21] = 2;
		costTable [(int)MaterialType.Garbage, 22] = 1;
		costTable [(int)MaterialType.Garbage, 23] = 1;
		costTable [(int)MaterialType.Garbage, 24] = 1;

		costTable [(int)MaterialType.Uranium, 0] = 16;
		costTable [(int)MaterialType.Uranium, 1] = 16;
		costTable [(int)MaterialType.Uranium, 2] = 14;
		costTable [(int)MaterialType.Uranium, 3] = 12;
		costTable [(int)MaterialType.Uranium, 4] = 10;
		costTable [(int)MaterialType.Uranium, 5] = 8;
		costTable [(int)MaterialType.Uranium, 6] = 7;
		costTable [(int)MaterialType.Uranium, 7] = 6;
		costTable [(int)MaterialType.Uranium, 8] = 5;
		costTable [(int)MaterialType.Uranium, 9] = 4;
		costTable [(int)MaterialType.Uranium, 10] = 3;
		costTable [(int)MaterialType.Uranium, 11] = 2;
		costTable [(int)MaterialType.Uranium, 12] = 1;
		costTable [(int)MaterialType.Uranium, 13] = 1;
		costTable [(int)MaterialType.Uranium, 14] = 1;
		costTable [(int)MaterialType.Uranium, 15] = 1;
		costTable [(int)MaterialType.Uranium, 16] = 1;
		costTable [(int)MaterialType.Uranium, 17] = 1;
		costTable [(int)MaterialType.Uranium, 18] = 1;
		costTable [(int)MaterialType.Uranium, 19] = 1;
		costTable [(int)MaterialType.Uranium, 20] = 1;
		costTable [(int)MaterialType.Uranium, 21] = 1;
		costTable [(int)MaterialType.Uranium, 22] = 1;
		costTable [(int)MaterialType.Uranium, 23] = 1;
		costTable [(int)MaterialType.Uranium, 24] = 1;
	}


	public void Show(bool show) {
		if (show) {
			transform.localPosition = new Vector3 (0.0f,0.0f, -0.02f);
//			DeselectAll ();
//			DealCards ();
//			LayoutPowerPlantCards ();
			LayoutPlayerMiniViews ();
		} else {
			transform.localPosition = new Vector3 (100.0f,100.0f,0);
			foreach(Player p in GameState.instance.Players) {
				p.PlayerMiniViewObj.transform.position = new Vector3(100,100,0);
				p.PlayerMiniViewObj.GetComponent<PlayerMiniView>().Layout();
			}
		}
	}
	
	public void LayoutPlayerMiniViews() {
		//layout players
		float xPos = -3.25f;
		float xStep = 2.2f;
		float zPos = -1.0f;
		
		Vector3 localPos = transform.position;
		int index = 0;
		foreach(Player p in GameState.instance.Players) {
			p.PlayerMiniViewObj.transform.position = localPos + new Vector3(xPos + xStep*index, 0.01f, zPos);
			p.PlayerMiniViewObj.GetComponent<PlayerMiniView>().Layout();
			index++;
		}
	}

	public void Reset() {
		SetInitialStock ();
	}

	public void SetInitialStock() {
		inventory [(int)MaterialType.Coal] = 24;
		inventory [(int)MaterialType.Oil] = 18;
		inventory [(int)MaterialType.Garbage] = 6;
		inventory [(int)MaterialType.Uranium] = 2;
	}

	public void Restock(int playerCount, int step) {
		Stock (MaterialType.Coal, materialRefillTable [playerCount, step, (int)MaterialType.Coal]);
		Stock (MaterialType.Oil, materialRefillTable [playerCount, step, (int)MaterialType.Oil]);
		Stock (MaterialType.Garbage, materialRefillTable [playerCount, step, (int)MaterialType.Garbage]);
		Stock (MaterialType.Uranium, materialRefillTable [playerCount, step, (int)MaterialType.Uranium]);
	}

	public void Stock(MaterialShop.MaterialType type, int count) {

		//should take into account unit owned by players?

		inventory[(int)type] += count;
		if (inventory [(int)type] > inventoryMaximums [(int)type])
			inventory [(int)type] = inventoryMaximums [(int)type];
		if (inventory [(int)type] < 0)
			inventory [(int)type] = 0;
	}

	public int QueryInventory(MaterialShop.MaterialType type) {
		return inventory [(int)type];
	}

	public int QueryCost(MaterialShop.MaterialType type) {
		return costTable[(int)type, QueryInventory(type)];
	}


	public bool Buy(PowerPlant pp) {

		if (pp.owner == null) {
			print ("Problem: power plant is stocking, but owner is null");
			return false;
		}
		if (pp.owner != GameState.instance.CurrentPlayer ()) {
			print ("Problem: Not players turn");
			return false;
		}
		if (!pp.CanStockMoreMaterial ()) {
			print ("Problem: Plant material stock is full");
			return false;
		}
		if (pp.type == PowerPlant.Type.Clean) {
			print ("Problem: Clean plants don't need to buy");
			return false;
		}
		if (pp.type == PowerPlant.Type.Step3) {
			print ("Problem: can't buy materials for a step card");
			return false;
		}

		MaterialType buyMaterial = MaterialType.Coal;
		switch (pp.type) {
		case PowerPlant.Type.Coal:
			buyMaterial = MaterialType.Coal;
			break;
		case PowerPlant.Type.Oil:
			buyMaterial = MaterialType.Oil;
			break;
		case PowerPlant.Type.Garbage:
			buyMaterial = MaterialType.Garbage;
			break;
		case PowerPlant.Type.Uranium:
			buyMaterial = MaterialType.Uranium;
			break;
		case PowerPlant.Type.Hybrid:
			if(QueryCost(MaterialType.Coal) < QueryCost(MaterialType.Oil))
				buyMaterial = MaterialType.Coal;
			else
				buyMaterial = MaterialType.Oil;
			break;
		}

		if (inventory [(int)buyMaterial] <= 0) {
			print ("Problem: sold out of material");
			return false;
		}
		if (QueryCost (buyMaterial) > pp.owner.cash) {
			print ("Problem: player does not have enough money");
			return false;
		}

		pp.owner.cash -= QueryCost (buyMaterial);
		pp.materialStock++;
		inventory [(int)buyMaterial]--;
		return true;
	}
}

